# Reference from .gitconfig like this:
# [include]
#   path = dotfiles/gitalias

[alias]
	st = status
	co = checkout
	ci = commit
	l  = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(black)%s%C(reset) %C(dim red)- %an%C(reset)' --all
	ls = log --stat
	d  = difftool -t meld -d
	edit-history = "!sh -c \"git rebase -i `git merge-base HEAD $1`\""
	show-diff = "!sh -c \"git difftool -t opendiff -d `git merge-base HEAD $1`\""
	since = !git log $(git merge-base --fork-point sprint)..HEAD

	# $ git mergein <target branch>
	#   - rebase the target branch against the current branch (running rebasesafe
	#     first)
	#   - run rebase -i on the target branch allowing you to cleanup messages,
	#     squash commits, re-order, etc.
	#   - merge the target into the current branch
	#   - display a prompt to push the changes to the origin
	#     - when pushing, also force push the rebased target so that merge/pull
	#       requests are closed.
	#   - finally display a prompt to delete the now merged in branch locally
	#     and from the origin.
	mergein = "!f() { I=$(git pick -e -t rev $1); if [ -z \"$I\" ] ; then echo \"abort: Name of the branch to merge into this branch is required.\"; return; fi; B=$(git brname); if ! $(git brexists \"$I\") ; then echo \"abort: Local branch '$I' not found.\"; return; fi; if [ \"$B\" == \"$I\" ] ; then echo \"abort: Attempting to merge $B into itself.\"; return; fi; echo \"Running git fetch...\"; git fetch; if [ \"$(git in)\" != \"\" ] ; then echo \"abort: Incoming commits not yet merged.\"; git in; return; fi; git co $I; git rebasesafe $B; if [ $? -ne 0 ] ; then echo \"abort: Preventing conflicting rebase\"; git co $B; return; fi; git rebase $B; if [ $? -ne 0 ] ; then return; fi; git rebase -i $B; if [ \"$(git brname)\" == \"HEAD\" ] ; then return; fi; read -p \"Continue to merge $(git brname) into $B (y/n)? \"; if [ \"$REPLY\" != \"y\" ] ; then return; fi; git co $B; git merge $I; if [ -n \"$(git remote)\" ] ; then git out; read -p \"Push to origin (y/n)? \"; if [ \"$REPLY\" == \"y\" ] ; then git co $I && git push -f; git co $B && git push; fi; fi; read -p \"Delete branch $I (y/n)? \"; if [ \"$REPLY\" == \"y\" ] ; then git dbranch $I; fi; }; f"
